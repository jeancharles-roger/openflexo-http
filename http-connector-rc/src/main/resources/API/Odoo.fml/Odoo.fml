use org.openflexo.http.connector.fml.xmlrpc.XmlRpcModelSlot;
use org.openflexo.http.connector.fml.rest.RestModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/http/API/Odoo.fml")
public class Odoo {

  @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)  
  public FlexoConceptInstanceType<Version> version;
  @PrimitiveRole(cardinality=ZeroOne,readOnly=false)  
  public Integer uid;
  @GetSetProperty(value="partners", access=get)  
  public List<FlexoConceptInstanceType<OdooObject>> getPartners {  
    return this.SelectFlexoConceptInstance(type=OdooObject);  
  }
  @GetSetProperty(value="companies", access=get)  
  public List<FlexoConceptInstanceType<OdooObject>> getCompanies {  
    return this.SelectFlexoConceptInstance(type=OdooObject);  
  }
  @PrimitiveRole(cardinality=ZeroOne,readOnly=false)  
  public String database;
  @PrimitiveRole(cardinality=ZeroOne,readOnly=false)  
  public String username;
  @PrimitiveRole(cardinality=ZeroOne,readOnly=false)  
  public String password;

  @ActionScheme  
  FlexoConceptInstanceType<Version> retrieveVersion() {  
    return this.PerformXmlRpcRequest();  
  }  

  @ActionScheme  
  Void authenticate(String username, String password) {  
    uid = this.PerformXmlRpcRequest();  
  }  

  @ActionScheme  
  Void retrieveInstances(String conceptName, String odooEntityName, Integer limit, Integer offset) {  
    FlexoConcept flexoConcept = this.virtualModel.getFlexoConcept(parameters.conceptName);    
    log ((("Searching " + flexoConcept) + " entity=") + parameters.odooEntityName)    
    log ("limit=" + parameters.limit)    
    log ("offset=" + parameters.offset)    
    HashMap<Object,Object> requestParameters = new HashMap<Object,Object>();    
    requestParameters.put("limit",parameters.limit)    
    requestParameters.put("offset",parameters.offset)    
    ArrayList<Object> fieldsList = new ArrayList<Object>();    
    for (property : flexoConcept.accessibleAbstractProperties) {    
      fieldsList.add(property.name)    
    }    
    requestParameters.put("fields",fieldsList)    
    ArrayList<Object> requestConditions = new ArrayList<Object>();    
    this.PerformXmlRpcRequest()  
  }  

  @ActionScheme  
  Void retrieveResPartners() {  
    this.retrieveInstances("ResPartner","res.partner",30,0)    
    this.firePropertyChange partners  
  }  

  @ActionScheme  
  Void retrieveResCompanies() {  
    this.retrieveInstances("ResCompany","res.company",30,0)    
    this.firePropertyChange companies  
  }  

  @ActionScheme  
  FlexoConceptInstanceType<NotFound:null> findInstance(String conceptName, String odooEntityName, Integer id) {  
    List<FlexoConceptInstanceType<OdooObject>> matchingList = this.SelectFlexoConceptInstance(type=OdooObject,where=where=(selected.id = parameters.id));    
    if (matchingList.size > 0) {    
      return matchingList.get(0);    
    }    
    FlexoConcept flexoConcept = this.virtualModel.getFlexoConcept(parameters.conceptName);    
    log ("Looking up object with id " + parameters.id)    
    HashMap<Object,Object> requestParameters = new HashMap<Object,Object>();    
    ArrayList<Object> fieldsList = new ArrayList<Object>();    
    for (property : flexoConcept.accessibleAbstractProperties) {    
      fieldsList.add(property.name)    
    }    
    requestParameters.put("fields",fieldsList)    
    ArrayList<Object> requestConditions = new ArrayList<Object>();    
    ArrayList<Object> conditionsList = new ArrayList<Object>();    
    ArrayList<Object> firstCondition = new ArrayList<Object>();    
    firstCondition.add("id")    
    firstCondition.add("=")    
    firstCondition.add(parameters.id)    
    conditionsList.add(firstCondition)    
    requestConditions.add(conditionsList)    
    FlexoConceptInstanceType<OdooObject> foundObject = this.PerformXmlRpcRequest();    
    return foundObject;  
  }  

  @CreationScheme  
  Odoo:init(String database, String username, String password) {  
    log ("Initializing Odoo VM with " + parameters.database)    
    database = parameters.database;    
    username = parameters.username;    
    password = parameters.password;    
    version = this.retrieveVersion();    
    log ("version=" + version)    
    this.authenticate(parameters.username,parameters.password)  
  }  


  @FlexoConcept  
  public class Version {  
  
    @AbstractProperty    
    abstract Integer protocol_version;  
    @AbstractProperty    
    abstract String server_serie;  
    @AbstractProperty    
    abstract String server_version;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class ResPartner {  
  
    @AbstractProperty    
    abstract String name;  
    @AbstractProperty    
    abstract String siren;  
    @AbstractProperty    
    abstract String comment;  
    @AbstractProperty    
    abstract Boolean is_company;  
    @AbstractProperty    
    abstract Boolean customer;  
    @AbstractProperty    
    abstract Boolean employee;  
    @AbstractProperty    
    abstract String street;  
    @AbstractProperty    
    abstract String street2;  
    @AbstractProperty    
    abstract String zip;  
    @AbstractProperty    
    abstract String city;  
    @AbstractProperty    
    abstract String email;  
    @AbstractProperty    
    abstract String phone;  
    @AbstractProperty    
    abstract String fax;  
    @AbstractProperty    
    abstract String mobile;  
    @GetSetProperty(value="company", access=get)    
    public FlexoConceptInstanceType<NotFound:null> getCompany {    
      return container.findInstance("ResCompany","res.company",company_id);    
    }  
    @AbstractProperty    
    abstract Integer company_id;  
  }  

  @FlexoConcept  
  public class OdooObject {  
  
    @AbstractProperty    
    abstract Integer id;  
  }  

  @FlexoConcept  
  public class ResCompany {  
  
    @AbstractProperty    
    abstract String name;  
    @AbstractProperty    
    abstract String street;  
    @AbstractProperty    
    abstract String street2;  
    @AbstractProperty    
    abstract String zip;  
    @AbstractProperty    
    abstract String city;  
  }  

}
