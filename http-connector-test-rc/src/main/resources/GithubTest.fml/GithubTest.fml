use org.openflexo.http.connector.fml.rest.RestModelSlot;
use org.openflexo.technologyadapter.gina.FIBComponentModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/http-test/GithubTest.fml")
public class GithubTest {

  @RestModelSlot(cardinality=ZeroOne,readOnly=false)  
  public VirtualModelInstanceType<GithubV3> github;
  @FIBComponentModelSlot(cardinality=ZeroOne,readOnly=false)  
  public GINAFIBComponent ui;
  @GetSetProperty(value="utilisateurs", access=get)  
  public List<FlexoConceptInstanceType<Utilisateur>> getUtilisateurs {  
    return this.SelectFlexoConceptInstance(type=Utilisateur);  
  }

  @CreationScheme  
  Void create(String url, String user, String password) {  
    github = null.CreateHttpRestResource();    
    ui = ui.ConfigureGINAFIBComponent();  
  }  

  @ActionScheme  
  public Void recherche(String query) {  
    log ("Nouvelle recherche avec " + parameters.query)    
    MatchingSet set = this.initiateMatching(Utilisateur);    
    for (user : github) {    
      log ("Found " + user)      
      FML@RT::MatchFlexoConceptInstance as Utilisateur match=(user=user) using Utilisateur:create(user)    
    }    
    set.finalizeMatching()    
    this.firePropertyChange utilisateurs  
  }  

  @DeletionScheme  
  Void delete() {  
  
  }  


  @FlexoConcept  
  public class Utilisateur {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<User> user;  
    @ExpressionProperty    
    public String login = user.login;  
  
    @CreationScheme    
    Void create(FlexoConceptInstanceType<User> user) {    
      user = parameters.user;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
